name: Release

on:
  pull_request:
    branches: [master]
    types: [closed]


env:
  JAVA_VERSION: '18'
  JAVA_DISTRIBUTION: 'temurin'
  JRE_VERSION: '18.0.2'
  GITHUB_TOKEN: ${{ github.token }}
  ARTIFACT_NAME: 'FormikoLauncher'
  JPACKAGE: 'jpackage --java-options "$(cat .mvn/jvm.config)" --input in -d out --name Formiko --main-jar Formiko.jar --main-class fr.formiko.formikolauncher.Main --app-version $(cat version.md) --description "Formiko, a game about ant." --license-file LICENSE.md  --vendor Hydrolien --runtime-image jlink/'

jobs:
  releaseJob:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-java@v3
      with:
        distribution: ${{ env.JAVA_DISTRIBUTION }}
        java-version: ${{ env.JAVA_VERSION }}

    - name: Version-Tool
      uses: HydrolienF/Version-Tool@0.6.4
      id: version

    - name: update version.md
      run: echo ${{ steps.version.outputs.version }} > version.md

    - name: exe.sh
      run: |
        mvn -ntp versions:set -DnewVersion="$(cat version.md)"
        mvn -ntp package
        mv target/Formiko-$(cat version.md).jar Formiko.jar
        echo "choose name"
        nom=Formiko$(cat version.md)
        if [[ -e out/ ]]; then
          echo "clear out"
          rm out/ -fr
        fi
        mkdir out/

        mkdir out/$nom
        echo "cp .jar, README.md, LICENSE.md & version.md"
        mv Formiko.jar out/$nom/.
        cp README.md out/$nom/.
        cp LICENSE.md out/$nom/.
        cp version.md out/$nom/.
        cp .mvn/jvm.config out/$nom/.

        echo "zip part"
        cd out/
        zip -qr $nom.zip $nom
        echo "delete directory"
        rm -fr $nom
        cd ..

        echo "-----------------------"
        ls -l out/
        echo "-----------------------"

    - name: release
      uses: actions/create-release@v1
      id: create_release
      with:
        draft: false
        prerelease: true
        release_name: Formiko${{ steps.version.outputs.version }}
        tag_name: ${{ steps.version.outputs.version }}
        body_path: CHANGELOG.md
    # - name: upload Linux artifact
    #   uses: actions/upload-release-asset@v1
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     asset_path: ./out/Formiko${{ steps.version.outputs.version }}Linux.zip
    #     asset_name: Formiko${{ steps.version.outputs.version }}Linux.zip
    #     asset_content_type: application/zip
    # - name: upload Windows artifact
    #   uses: actions/upload-release-asset@v1
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     asset_path: ./out/Formiko${{ steps.version.outputs.version }}Windows.zip
    #     asset_name: Formiko${{ steps.version.outputs.version }}Windows.zip
    #     asset_content_type: application/zip
    # - name: upload Mac artifact
    #   uses: actions/upload-release-asset@v1
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     asset_path: ./out/Formiko${{ steps.version.outputs.version }}Mac.zip
    #     asset_name: Formiko${{ steps.version.outputs.version }}Mac.zip
    #     asset_content_type: application/zip
    - name: upload .jar artifact
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./out/Formiko${{ steps.version.outputs.version }}.zip
        asset_name: Formiko${{ steps.version.outputs.version }}.zip
        asset_content_type: application/zip

    - name: commit version
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git config pull.rebase true
        git add version.md
        git commit -m "Auto data version update"
        git restore .
        git fetch
        git pull
        git push

  WindowsArtifact:
    env:
      OS: 'Windows'
    if: github.event.pull_request.merged == true
    needs: releaseJob
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-java@v3
      with:
        distribution: ${{ env.JAVA_DISTRIBUTION }}
        java-version: ${{ env.JAVA_VERSION }}

    - name: jlink
      shell: pwsh
      run: |
        mvn -ntp compile exec:java -Dargs='downloadAndUnzip https://github.com/HydrolienF/JRE/releases/download/${{ env.JRE_VERSION }}/jlink.zip jlink/ j${{ env.OS }}/'
        ls jlink/
    - name: Pull
      run: |
        git config pull.rebase false
        git pull

    - name: version
      id: version
      shell: pwsh
      run: |
        $version = cat version.md
        echo "-------------"
        echo $version
        echo "-------------"
        echo "::set-output name=version::$version"

    - name: build
      shell: pwsh
      run: |
        # Start of commun par with all OS
        mvn -ntp versions:set -DnewVersion="$(cat version.md)"
        mvn -ntp exec:java -Dargs='downloadAndUnzip https://github.com/HydrolienF/FormikoLauncher/releases/download/${{ steps.version.outputs.version }}/Formiko${{ steps.version.outputs.version }}.zip in/ Formiko${{ steps.version.outputs.version }}/'
        ls in/
        # end of commun par with all OS
        ${{ env.JPACKAGE }} --icon tools/icon.ico --win-shortcut --win-menu --win-menu-group "Formiko" -t msi --win-upgrade-uuid "1468751e-078f-4fab-80e4-fa15e9b364b3"
        rm -r in
        cscript tools/addLaunchToMsi.js ${{ steps.version.outputs.version }}
        echo "======================================================"
        echo "ls"
        ls
        echo "======================================================"
        echo "ls out/"
        ls out/
        echo "======================================================"
        mv ./out/Formiko-${{ steps.version.outputs.version }}.msi ${{ env.ARTIFACT_NAME }}.msi
    - name: upload .msi artifact
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{needs.releaseJob.outputs.output1}}
        asset_path: ${{ env.ARTIFACT_NAME }}.msi
        asset_name: ${{ env.ARTIFACT_NAME }}.msi
        asset_content_type: application/msi

  LinuxArtifact:
    env:
      OS: 'Linux'
    if: github.event.pull_request.merged == true
    needs: releaseJob
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-java@v3
      with:
        distribution: ${{ env.JAVA_DISTRIBUTION }}
        java-version: ${{ env.JAVA_VERSION }}

    - name: jlink
      run: |
        mvn -ntp compile exec:java -Dargs='downloadAndUnzip https://github.com/HydrolienF/JRE/releases/download/${{ env.JRE_VERSION }}/jlink.zip jlink/ j${{ env.OS }}/'
        ls jlink/
    - name: Pull
      run: |
        git config pull.rebase false
        git pull
    - name: version
      id: version
      run: |
        version=$(cat version.md)
        echo "-------------"
        echo $version
        echo "-------------"
        echo "::set-output name=version::$version"
    - name: build
      run: |
        # Start of commun par with all OS
        mvn -ntp versions:set -DnewVersion="$(cat version.md)"
        mvn -ntp exec:java -Dargs='downloadAndUnzip https://github.com/HydrolienF/FormikoLauncher/releases/download/${{ steps.version.outputs.version }}/Formiko${{ steps.version.outputs.version }}.zip in/ Formiko${{ steps.version.outputs.version }}/'
        ls in/
        # end of commun par with all OS
        # TOFIX shortcut don't seem's to work neether in menu, nor in terminal.
        # TOFIX icon is not used on tab screen or in menu screen
        ${{ env.JPACKAGE }} --icon tools/icon.png -t deb --linux-package-name formiko --linux-shortcut --linux-deb-maintainer hydrolien.f@gmail.com --linux-menu-group "Game;StrategyGame" --linux-app-category games --resource-dir tools/debRessources/
        ls out/
        mv out/formiko_${{ steps.version.outputs.version }}_amd64.deb ${{ env.ARTIFACT_NAME }}.deb
    - name: upload .deb artifact
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{needs.releaseJob.outputs.output1}}
        asset_path: ${{ env.ARTIFACT_NAME }}.deb
        asset_name: ${{ env.ARTIFACT_NAME }}.deb
        asset_content_type: application/deb

  MacArtifact:
    env:
      OS: 'Mac'
    if: github.event.pull_request.merged == true
    needs: releaseJob
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-java@v3
      with:
        distribution: ${{ env.JAVA_DISTRIBUTION }}
        java-version: ${{ env.JAVA_VERSION }}

    - name: jlink
      run: |
        mvn -ntp compile exec:java -Dargs='downloadAndUnzip https://github.com/HydrolienF/JRE/releases/download/${{ env.JRE_VERSION }}/jlink.zip jlink/ j${{ env.OS }}/'
        ls jlink/
    - name: Pull
      run: |
        git config pull.rebase false
        git pull
    - name: version
      id: version
      run: |
        version=$(cat version.md)
        echo "-------------"
        echo $version
        echo "-------------"
        echo "::set-output name=version::$version"
    - name: build
      run: |
        # Start of commun par with all OS
        mvn -ntp versions:set -DnewVersion="$(cat version.md)"
        mvn -ntp exec:java -Dargs='downloadAndUnzip https://github.com/HydrolienF/FormikoLauncher/releases/download/${{ steps.version.outputs.version }}/Formiko${{ steps.version.outputs.version }}.zip in/ Formiko${{ steps.version.outputs.version }}/'
        ls in/
        # end of commun par with all OS
        # TOFIX shortcut don't seem's to work neether in menu, nor in terminal.
        # TOFIX icon is not used on tab screen or in menu screen
        ${{ env.JPACKAGE }} --icon tools/icon.icns -t dmg --mac-package-name formiko --mac-package-identifier "1468751e-078f-4fab-80e4-fa15e9b364b3"
        ls out/
        mv out/formiko-${{ steps.version.outputs.version }}.dmg ${{ env.ARTIFACT_NAME }}.dmg
    - name: upload .dmg artifact
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{needs.releaseJob.outputs.output1}}
        asset_path: ${{ env.ARTIFACT_NAME }}.dmg
        asset_name: ${{ env.ARTIFACT_NAME }}.dmg
        asset_content_type: application/dmg



  # # Badge part
  # badge:
  #   if: github.event.pull_request.merged == true
  #   needs: releaseJob
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #   - uses: actions/setup-java@v3
  #       with:
  #         distribution: ${{ env.JAVA_DISTRIBUTION }}
  #         java-version: ${{ env.JAVA_VERSION }}
  #
  #   - name: Pull
  #     run: |
  #       git config pull.rebase false
  #       git pull
  #   - name: Generate Badges files
  #     run: mvn -ntp compile test exec:java -Dargs="createBadges"
  #     id: badgeFile
  #
  #   - name: Generate JaCoCo Badge
  #     id: jacoco
  #     uses: cicirello/jacoco-badge-generator@v2.0.1
  #
  #   - name: Log coverage percentage
  #     run: |
  #       echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
  #       echo "branch coverage = ${{ steps.jacoco.outputs.branches }}"
  #
  #   - name: Commit the badges (if it changed)
  #     run: |
  #       if [[ `git status --untracked-files=no --porcelain .github/badges/` != "" ]]; then
  #         git config --local user.email "action@github.com"
  #         git config --local user.name "GitHub Action"
  #         git config pull.rebase true
  #         git add .github/badges/*
  #         git commit -m "Autogenerated badges"
  #         git restore .
  #         git fetch
  #         git pull
  #         git push
  #       fi
  #
  #   - name: Upload JaCoCo coverage report
  #     uses: actions/upload-artifact@v2
  #     with:
  #       name: jacoco-report
  #       path: target/site/jacoco/
